[
  {
    "Id": "157141",
    "ThreadId": "46980",
    "Html": "First a big thank's for adding support for mapping 2 existing objects.<br>\r\n<br>\r\nBut as you know more wants more :-)<br>\r\n<br>\r\n[Test]<br>\r\npublic void CanMap_RamSite_to_RamSiteDTO()<br>\r\n{<br>\r\n Mapper.CreateMap&lt;RamSite, RamSiteDTO&gt;()<br>\r\n  .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());<br>\r\n     <br>\r\n var ramsite = Session.Get&lt;RamSite&gt;(1);<br>\r\n var dto = new RamSiteDTO();<br>\r\n Mapper.Map&lt;RamSite, RamSiteDTO&gt;(ramsite, dto);<br>\r\n //Mapper.AssertConfigurationIsValid();<br>\r\n}<br>\r\n<br>\r\nI am using NH with CSLA in my Silverlight application, I hate CSLA but it works. <br>\r\n<br>\r\nThere is a lot of properties in the CSLA base class that I don't want to map.<br>\r\nI see 2 solutions for this<br>\r\n1. A global ignore list for a named context.<br>\r\n2. A way to ignore a baseclass<br>\r\n<br>\r\nCan you help me out one this one<br>\r\n<br>\r\nThanks for all the great work - this tool can become a real time saver\r\n",
    "PostedDate": "2009-02-12T11:01:22.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157276",
    "ThreadId": "46980",
    "Html": "Yikes that does look tough... I'm confused, the DTO has all of these properties on it?  And the ignoring is just for the AssertConfigurationIsValid?<br><br><br><div>On Thu, Feb 12, 2009 at 1:01 PM, mhnyborg <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: mhnyborg</p> <div>First a big thank's for adding support for mapping 2 existing objects.<br>\r\n\r\n<br>\r\nBut as you know more wants more :-)<br>\r\n<br>\r\n[Test]<br>\r\npublic void CanMap_RamSite_to_RamSiteDTO()<br>\r\n{<br>\r\n Mapper.CreateMap&lt;RamSite, RamSiteDTO&gt;()<br>\r\n  .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n  .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());<br>\r\n     <br>\r\n var ramsite = Session.Get&lt;RamSite&gt;(1);<br>\r\n var dto = new RamSiteDTO();<br>\r\n Mapper.Map&lt;RamSite, RamSiteDTO&gt;(ramsite, dto);<br>\r\n //Mapper.AssertConfigurationIsValid();<br>\r\n}<br>\r\n<br>\r\nI am using NH with CSLA in my Silverlight application, I hate CSLA but it works. <br>\r\n<br>\r\nThere is a lot of properties in the CSLA base class that I don't want to map.<br>\r\nI see 2 solutions for this<br>\r\n1. A global ignore list for a named context.<br>\r\n2. A way to ignore a baseclass<br>\r\n<br>\r\nCan you help me out one this one<br>\r\n<br>\r\nThanks for all the great work - this tool can become a real time saver\r\n</div> <div> <p>Read the <a href=\"http://www.codeplex.com/AutoMapper/Thread/View.aspx?ThreadId=46980&ANCHOR#Post157141\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:AutoMapper@discussions.codeplex.com?subject=[AutoMapper:46980]\">AutoMapper@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:AutoMapper@discussions.codeplex.com\">AutoMapper@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/project/unsubscribe/AutoMapper\">unsubscribe or change your settings</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div> </blockquote>\r\n</div><br>",
    "PostedDate": "2009-02-12T20:15:07.77-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157339",
    "ThreadId": "46980",
    "Html": "I use CSLA because it works very good with keeping track of dirty and broken rules. Databinding also works well in Silverlight.<br>\r\n<br>\r\nSo all this properties that I ignore are on the CSLA base class and not on the domain class.<br>\r\n<br>\r\nAnd yes all this properties are the output from AssertConfigurationIsValid\r\n",
    "PostedDate": "2009-02-13T01:29:48.053-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157422",
    "ThreadId": "46980",
    "Html": "Yes, we have been looking for things like this as well, as we have some layer supertypes around some of our DTOs.<br><br>I think you'll want something like:<br><br>OnBaseDestinationType&lt;CslaRootType&gt;()<br>.ForMember(clsa =&gt; csla.BrokenRulesCollection, opt =&gt; opt.Ignore());<br>\r\n<br>This syntax doesn't exist yet, but is that pretty much what you're looking for?<br><br><div>On Fri, Feb 13, 2009 at 3:29 AM, mhnyborg <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: mhnyborg</p> <div>I use CSLA because it works very good with keeping track of dirty and broken rules. Databinding also works well in Silverlight.<br>\r\n\r\n<br>\r\nSo all this properties that I ignore are on the CSLA base class and not on the domain class.<br>\r\n<br>\r\nAnd yes all this properties are the output from AssertConfigurationIsValid\r\n</div><div> <div> <p>Read the <a href=\"http://www.codeplex.com/AutoMapper/Thread/View.aspx?ThreadId=46980&ANCHOR#Post157339\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:AutoMapper@discussions.codeplex.com?subject=[AutoMapper:46980]\">AutoMapper@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:AutoMapper@discussions.codeplex.com\">AutoMapper@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/project/unsubscribe/AutoMapper\">unsubscribe or change your settings</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2009-02-13T06:21:07.81-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157443",
    "ThreadId": "46980",
    "Html": "Yes that would work.<br>\r\n<br>\r\nWhat about:  Mapper.CreateMap&lt;RamSite, RamSiteDTO&gt;().IgnoreClass(&quot;BusinessBase&quot;)<br>\r\n<br>\r\nHope you can help me with a problem that I have right now.<br>\r\n<br>\r\nThe domain has an Address value object and the CSLA DTO has an Address to. The DTO address object is also using BusinessBase.<br>\r\n<br>\r\nThe mapping is throwing this exception<br>\r\nAutoMapper.AutoMapperMappingException: Unable to perform mapping, view the ResolutionContext for more details. Trying to map Address to AddressDTO.<br>\r\nMissing type map configuration or unsupported mapping.<br>\r\n<br>\r\nAll the properties are the same, but AddressDTO also has all this extra fields like IsDirty, IsBusy. <br>\r\nhave can I map RamSite.Address to RamSiteDTO.AddressDTO ?\r\n",
    "PostedDate": "2009-02-13T07:38:51.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157455",
    "ThreadId": "46980",
    "Html": "I found a solution for mapping Address to AddressDTO. But my mapping code is starting to get heavy<br>\r\n<br>\r\n<p>Mapper.CreateMap&lt;RamSite, RamSiteDTO&gt;()<br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.Projects, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.Address, opt =&gt; opt.Ignore());</p>\r\n<p>Mapper.CreateMap&lt;SiteProject, ProjectDTO&gt;()<br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());</p>\r\n<p>Mapper.CreateMap&lt;Address, AddressDTO&gt;()<br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());<br>\r\n<br>\r\nvar ramsite = Session.Get&lt;RamSite&gt;(1);<br>\r\nNHibernateUtil.Initialize(ramsite.Projects);<br>\r\nvar dto = new RamSiteDTO();<br>\r\nMapper.Map(ramsite, dto);<br>\r\nMapper.Map(ramsite.Address, dto.Address);<br>\r\nforeach (var project in ramsite.Projects)<br>\r\n{<br>\r\n var pdto = new ProjectDTO();<br>\r\n // do some stuff with pdto before mapping<br>\r\n dto.Projects.Add(Mapper.Map(project, pdto));<br>\r\n}</p>\r\n",
    "PostedDate": "2009-02-13T08:00:08.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157459",
    "ThreadId": "46980",
    "Html": "I am not a spammer :-) but I have to tell this.<br>\r\n<br>\r\nAfter I created the address map. I found out that I could map the Ramsite object again. Looks like AutoMapper is using a map for a type if it can find one - very nice<br>\r\n<br>\r\nvar ramsite = Session.Get&lt;RamSite&gt;(1);<br>\r\nNHibernateUtil.Initialize(ramsite.Projects);<br>\r\nvar dto = new RamSiteDTO();<br>\r\nMapper.Map(ramsite, dto);<br>\r\nMapper.Map(ramsite.Address, dto.Address); ***** now I can remove this line ******<br>\r\nforeach (var project in ramsite.Projects)<br>\r\n{<br>\r\n var pdto = new ProjectDTO();<br>\r\n // do some stuff with pdto before mapping<br>\r\n dto.Projects.Add(Mapper.Map(project, pdto));<br>\r\n}\r\n",
    "PostedDate": "2009-02-13T08:11:12.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "157466",
    "ThreadId": "46980",
    "Html": "Yes, that way is a solution.  BTW, I wouldn't call these objects &quot;DTOs&quot;, as they're not.  DTOs are for _data_ _transfer_ _objects_, and are nothing more than classes with a bunch of dumb properties.  Also, AutoMapper doesn't support two-way binding, so if you want to map back and forth, you'll need to create two mapping configurations.<br>\r\n<br>Aside from that, what you want is configuration for a base destination type.  That'll take a little bit more, so look for it sometime soon.<br><br><div>On Fri, Feb 13, 2009 at 10:00 AM, mhnyborg <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: mhnyborg</p> <div>I found a solution for mapping Address to AddressDTO. But my mapping code is starting to get heavy<br>\r\n\r\n<br>\r\n<p></p><div>Mapper.CreateMap&lt;RamSite, RamSiteDTO&gt;()<br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore())<br></div>\r\n .ForMember(x =&gt; x.Projects, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.Address, opt =&gt; opt.Ignore());\r\n<p>Mapper.CreateMap&lt;SiteProject, ProjectDTO&gt;()</p><div><br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());</div>\r\n<p>Mapper.CreateMap()</p><div><br>\r\n .ForMember(x =&gt; x.BrokenRulesCollection, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsNew, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsDeleted, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfDirty, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfBusy, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSavable, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.IsSelfValid, opt =&gt; opt.Ignore())<br>\r\n .ForMember(x =&gt; x.BypassPropertyChecks, opt =&gt; opt.Ignore());<br>\r\n<br>\r\nvar ramsite = Session.Get&lt;RamSite&gt;(1);<br></div>\r\nNHibernateUtil.Initialize(ramsite.Projects);<br>\r\nvar dto = new RamSiteDTO();<br>\r\nMapper.Map(ramsite, dto);<br>\r\nMapper.Map(ramsite.Address, dto.Address);<br>\r\nforeach (var project in ramsite.Projects)<br>\r\n{<br>\r\n var pdto = new ProjectDTO();<br>\r\n // do some stuff with pdto before mapping<br>\r\n dto.Projects.Add(Mapper.Map(project, pdto));<br>\r\n}\r\n</div><div> <div> <p>Read the <a href=\"http://www.codeplex.com/AutoMapper/Thread/View.aspx?ThreadId=46980&ANCHOR#Post157455\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:AutoMapper@discussions.codeplex.com?subject=[AutoMapper:46980]\">AutoMapper@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:AutoMapper@discussions.codeplex.com\">AutoMapper@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/project/unsubscribe/AutoMapper\">unsubscribe or change your settings</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2009-02-13T08:40:47.697-08:00",
    "UserRole": "Coordinator",
    "MarkedAsAnswerDate": null
  }
]