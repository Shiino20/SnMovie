Index: src/AutoMapper/Internal/ReflectionHelper.cs
===================================================================
--- src/AutoMapper/Internal/ReflectionHelper.cs	(revision 43)
+++ src/AutoMapper/Internal/ReflectionHelper.cs	(working copy)
@@ -3,6 +3,7 @@
 using System.Linq.Expressions;
 using System.Reflection;
 using AutoMapper.Internal;
+using System.Collections.Generic;
 
 namespace AutoMapper
 {
@@ -68,17 +69,21 @@
 
             public static IMemberAccessor[] GetPublicReadAccessors(this Type type)
             {
-                MemberInfo[] members = type.FindMembers(MemberTypes.Property | MemberTypes.Field,
-                                                         BindingFlags.Instance | BindingFlags.Public,
-                                                         (m, f) =>
-                                                         m is FieldInfo ||
-                                                         (m is PropertyInfo && ((PropertyInfo) m).CanRead),null);
+                var typesToScan = type.FindInterfaces((m, f) => true, null)
+                    .Concat(new[] { type, type.BaseType });
                 
-                var accessors = new IMemberAccessor[members.Length];
-                for (int i = 0; i < members.Length; i++)
-                    accessors[i] = members[i].ToMemberAccessor();
-                return accessors;
+                MemberInfo[] members = typesToScan
+                    .Where(x => x != null)
+                    .SelectMany(x => x.FindMembers(MemberTypes.Property | MemberTypes.Field,
+                                                     BindingFlags.Instance | BindingFlags.Public,
+                                                     (m, f) =>
+                                                     m is FieldInfo ||
+                                                     (m is PropertyInfo && ((PropertyInfo)m).CanRead), null))
+                     .ToArray();
 
+                return members
+                    .Select(x => x.ToMemberAccessor())
+                    .ToArray();
             }
 
             public static IMemberAccessor GetAccessor(this Type targetType,string accessorName,BindingFlags bindingFlags)
Index: src/UnitTests/InterfaceMapping.cs
===================================================================
--- src/UnitTests/InterfaceMapping.cs	(revision 43)
+++ src/UnitTests/InterfaceMapping.cs	(working copy)
@@ -109,5 +109,59 @@
 			}
 		}
 
+        public class When_mapping_a_derived_interface_to_an_concrete_type : AutoMapperSpecBase
+        {
+            private Destination _result = null;
+
+            public interface ISourceBase
+            {
+                int Id { get; }
+            }
+
+            public interface ISource : ISourceBase
+            {
+                int SecondId { get; }
+            }
+
+            private class Source : ISource
+            {
+                public int Id { get; set; }
+                public int SecondId { get; set; }
+            }
+
+            private class Destination
+            {
+                public int Id { get; set; }
+                public int SecondId { get; set; }
+            }
+
+            protected override void Establish_context()
+            {
+                Mapper.CreateMap<ISource, Destination>();
+            }
+
+            protected override void Because_of()
+            {
+                _result = Mapper.Map<ISource, Destination>(new Source { Id = 7, SecondId = 42 });
+            }
+
+            [Test]
+            public void Should_map_base_interface_property()
+            {
+                _result.Id.ShouldEqual(7);
+            }
+
+            [Test]
+            public void Should_map_derived_interface_property()
+            {
+                _result.SecondId.ShouldEqual(42);
+            }
+
+            [Test]
+            public void Should_pass_configuration_testing()
+            {
+                Mapper.AssertConfigurationIsValid();
+            }
+        }
 	}
 }
\ No newline at end of file
