{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "All issues moved to GitHub https&#58;&#47;&#47;github.com&#47;AutoMapper&#47;AutoMapper&#47;issues",
    "ClosedDate": "2011-09-02T15:47:10.44-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Mapper won't map values from an indexable list of properties.\n \nFor example:\ndestination:\n \n public interface IAmAnEmployee\n    {\n        string UserName { get; set; }\n         string LastName { get; set; }\n  }\nsource:\n \nvar d = new Dictionary<string, string>() { { \"UserName\", \"user1\" }, { \"LastName\", \"Smith\" } };\n \nI understand I could manualy map these 2 properties with .ForMember, however this is a small example, the real interface is actually 9 properties, and I 5 more interfaces that I would like to use an index based mapping.  The actual index type I'm trying to map from is System.Web.Mvc.FormCollection.",
    "LastUpdatedDate": "2013-05-16T04:59:06.6-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "AutoMapper",
    "ReportedDate": "2009-11-08T17:33:53.427-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Map From dictionary of values",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 4,
    "Id": 3266
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "just wrote a small extension method that solves this:\r\n\r\npublic static class IMappingExpressionExtensions\r\n{\r\n    public static IMappingExpression<IDictionary, TDestination> ConvertFromDictionary<TDestination>(this IMappingExpression<IDictionary, TDestination> exp, Func<string, string> propertyNameMapper)\r\n    {\r\n        foreach (PropertyInfo pi in typeof(Invoice).GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic))\r\n        {\r\n            if (!pi.CanWrite ||\r\n                pi.GetCustomAttributes(typeof(PersistentAttribute), false).Length == 0)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            string propertyName = pi.Name;\r\n            propertyName = propertyNameMapper(propertyName);\r\n            exp.ForMember(propertyName, cfg => cfg.MapFrom(r => r[propertyName]));\r\n        }\r\n        return exp;\r\n    }\r\n}\r\n\r\nUsage:\r\n\r\n        Mapper.CreateMap<IDictionary, MyType>()\r\n            .ConvertFromDictionary(propName => propName) // map property names to dictionary keys\r\n",
      "PostedDate": "2009-11-28T04:23:22.327-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This is pretty much the DefaultModelBinder class in ASP.NET MVC, a far better option if you're in that area.  Is this used outside of ASP.NET MVC?",
      "PostedDate": "2009-11-29T19:17:34.63-08:00",
      "Id": -2147483648
    },
    {
      "Message": "@jbogard - It's in use inside Asp.Net MVC However i'd like to use automapper since it can create an instance of an interface, where the default model binder can not. It would also be lovely if the solution would expose a dictionary of property name/error message or exception thrown. \r\n@oakinger i'm going to check out this solution, thanks.",
      "PostedDate": "2009-12-03T05:57:26.24-08:00",
      "Id": -2147483648
    },
    {
      "Message": "@ImaginaryDev\r\n\r\nIf you're able to get a good solution going, I'd be happy to add it to AutoMapper.",
      "PostedDate": "2009-12-04T09:01:42.58-08:00",
      "Id": -2147483648
    },
    {
      "Message": "is it tough enough that you aren't able to do it easily from the existing automapper framework?",
      "PostedDate": "2009-12-04T11:22:06.18-08:00",
      "Id": -2147483648
    },
    {
      "Message": "@ImaginaryDev\r\n\r\nNo, it's just that I have no context to know when I'm finished.  The above code works, but is _nowhere near_ as powerful as MVC's model binder.  Doesn't support arrays, complex types, etc etc. that MVC's default model binder does.  That's why it's easier if someone builds something that works for what they need, they send me a patch and I integrate it.  Only people doing FormCollection -> object mapping can know if it works, and those people don't include me :)",
      "PostedDate": "2009-12-04T13:47:29.08-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-02-02T22:57:33.97-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I'm also interested in this. I built a JSON ValueProvider and I would love to get the resultant, flattened dictionary in the ValueProvider to map to a matching InputModel. Right now, I have kludged it into the InputModelBinder, but using AutoMapper would prove more elegant and be more maintainable.",
      "PostedDate": "2010-09-17T14:24:49.72-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-02-10T03:15:10.3-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-09-02T15:47:10.44-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:49:25.393-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:06.6-07:00",
      "Id": -2147483648
    }
  ]
}