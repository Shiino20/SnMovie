using System.Collections.Generic;
using NUnit.Framework;

namespace Bbc.WW.InformationHub.Model.Source
{
    public class Town
    {
        private IList<Street> streets = new List<Street>();

        public virtual IList<Street> Streets
        {
            get { return streets; }
        }
    }
    public class Street
    {
        public virtual Town Town { get; set; }

        private readonly IList<House> houses = new List<House>();

        public virtual IList<House> Houses
        {
            get { return houses; }
        }
    }
    public class House
    {
        public virtual Street Street { get; set; }
    }
}

namespace Bbc.WW.InformationHub.Model.Target
{
    public class Town
    {
        private IList<Street> streets = new List<Street>();

        public virtual IList<Street> Streets
        {
            get { return streets; }
            set { streets = value; }
        }
    }
    public class Street
    {
        public virtual Town Town { get; set; }

        private IList<House> houses = new List<House>();

        public virtual IList<House> Houses
        {
            get { return houses; }
            set { houses = value; }
        }
    }
    public class House
    {
        public virtual Street Street { get; set; }
    }
}

namespace Bbc.WW.InformationHub.Model
{
    [TestFixture]
    public class AutoMapperTests
    {
        [SetUp]
        public void SetUp()
        {
            AutoMapper.Mapper.CreateMap<Source.Town, Target.Town>();
            AutoMapper.Mapper.CreateMap<Source.Street, Target.Street>();
            AutoMapper.Mapper.CreateMap<Source.House, Target.House>();

            AutoMapper.Mapper.AssertConfigurationIsValid();
        }

        [Test]
        public void MapsStreetHouseRelationshipCorrectly()
        {
            var sourceTown = new Source.Town();

            var sourceStreet = new Source.Street { Town = sourceTown };
            sourceTown.Streets.Add(sourceStreet);

            var sourceHouse = new Source.House { Street = sourceStreet };
            sourceStreet.Houses.Add(sourceHouse);
            var sourceHouse2 = new Source.House { Street = sourceStreet };
            sourceStreet.Houses.Add(sourceHouse2);

            var targetHouse = AutoMapper.Mapper.Map<Source.House, Target.House>(sourceHouse);
            var targetStreet = targetHouse.Street;
            Assert.That(targetStreet.Houses[0].Street, Is.EqualTo(targetStreet));
            Assert.That(targetStreet.Houses[1].Street, Is.EqualTo(targetStreet));
        }

        [Test]
        public void MapsTownStreetRelationshipCorrectlyWhenOneHouseAndOneStreetAndOneTown()
        {
            var sourceTown = new Source.Town();

            var sourceStreet = new Source.Street { Town = sourceTown };
            sourceTown.Streets.Add(sourceStreet);

            var sourceHouse = new Source.House { Street = sourceStreet };
            sourceStreet.Houses.Add(sourceHouse);

            var targetHouse = AutoMapper.Mapper.Map<Source.House, Target.House>(sourceHouse);

            Assert.That(targetHouse.Street.Town.Streets[0], Is.EqualTo(targetHouse.Street));
        }

        [Test]
        public void MapsTownStreetRelationshipCorrectlyWhenMultipleStreetsInTown()
        {
            var sourceTown = new Source.Town();

            var sourceStreet = new Source.Street { Town = sourceTown};
            sourceTown.Streets.Add(sourceStreet);

            var sourceStreet2 = new Source.Street { Town = sourceTown};
            sourceTown.Streets.Add(sourceStreet2);

            var sourceHouse = new Source.House {Street = sourceStreet2};
            sourceStreet2.Houses.Add(sourceHouse);

            var targetHouse = AutoMapper.Mapper.Map<Source.House, Target.House>(sourceHouse);

            Assert.That(targetHouse.Street.Town.Streets[1], Is.EqualTo(targetHouse.Street));
        }
    }
}