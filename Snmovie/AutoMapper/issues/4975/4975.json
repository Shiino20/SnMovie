{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "All issues moved to GitHub https&#58;&#47;&#47;github.com&#47;AutoMapper&#47;AutoMapper&#47;issues",
    "ClosedDate": "2011-09-02T15:46:26.14-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I guess this is not really a bug but is by design, however it would be great if there was a decent solution to this.  Basically our destination objects are not under our control and they have a number of properties which are collections and follow the pattern:\n \nprivate readonly List<Something> listOfSomething = new List<Something>();\n \npublic List<Something> ListOfSomething {get { return listOfSomething; } }\n \n- When I setup the mapper to map to these properties from other collection properties, these mappings do not work.   Is there are a way to solve this?  I appreciate that it obviously can't create a new instance of the target property but for collections could there not be an alternative which can populate an existing instance?",
    "LastUpdatedDate": "2013-05-16T04:59:02.537-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "AutoMapper",
    "ReportedDate": "2010-06-29T09:52:33.55-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Nested mapping between two collection properties does not working when destination only has a getter",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 4975
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I concur. Handling nested mappings for readonly collection properties would be a fantastic feature.",
      "PostedDate": "2010-08-11T08:39:44.37-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-07-28T01:28:25.727-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-09-02T15:46:26.14-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:49:20.313-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:02.537-07:00",
      "Id": -2147483648
    }
  ]
}