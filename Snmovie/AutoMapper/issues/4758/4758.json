{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "All issues moved to GitHub https&#58;&#47;&#47;github.com&#47;AutoMapper&#47;AutoMapper&#47;issues",
    "ClosedDate": "2011-09-02T15:46:31.227-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hey Guys,\n \nI am mapping an array in a class. In my source class it is null but when it gets mapped it becomes an array of 0 size.\n \nI have tried the :\n \n            Mapper.Initialize(c =>\n            {\n                c.AllowNullDestinationValues = true;\n            });\n \noption but this does not keep the array as a null value and instead creates the array of empty size.\n \nIs there a way I can get the array to stay null? or is this a bug?",
    "LastUpdatedDate": "2013-05-16T04:59:03.263-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "AutoMapper",
    "ReportedDate": "2010-05-27T05:18:52.13-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Mapping an array which is null becomes an empty array",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 4758
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I can approve this. This is also true for Lists.\r\nShould not behave like that imho.\r\n",
      "PostedDate": "2010-05-27T10:09:33.893-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-05-27T10:12:09.103-07:00",
      "Id": -2147483648
    },
    {
      "Message": "From Framework Design Guidelines and other C# references, arrays, lists, collections, dictionaries and IEnumerables should NEVER be null, ever.  You always only check for empty values.  Any method or property that returns one of these items should guarantee that an empty collection is returned, rather than a null.\r\n\r\nSince this is the behavior of the entire BCL, what's the use case of wanting a null collection?",
      "PostedDate": "2010-05-27T19:46:08.573-07:00",
      "Id": -2147483648
    },
    {
      "Message": "The area that I am using this tool. The starting object has null lists. I am then serializing to xml. in the case of a null value the node gets the following attribute:\r\n\r\n<mynode xsi:nil=\"true\" />\r\n\r\nIn the case of an empty list the node comes out as\r\n\r\n<mynode />\r\n\r\nwhich causes a problem on the xsd validation.",
      "PostedDate": "2010-05-27T22:09:28.343-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-07-19T10:10:12.283-07:00",
      "Id": -2147483648
    },
    {
      "Message": "agree, some properties (of type collection) may not have been assigned to anything depending on logic; this changes the behavior, violates the principle of least astonishment in my opinion, if the original object had a null collection, I expect the new object to have a null collection as well",
      "PostedDate": "2011-07-19T10:14:53.197-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-09-02T15:46:31.227-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T17:49:21.21-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T04:59:03.263-07:00",
      "Id": -2147483648
    }
  ]
}